# Docker Compose for local development and testing
# Use this to test the full stack before Coolify deployment
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: attendance_dashboard
      POSTGRES_USER: attendance_user
      POSTGRES_PASSWORD: nVp50Q8PefBbCqXNiLmOb45K0ZXCHv7EKEmTcr4GRDxT5gXoIBdLL7MYLx8PGP19
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-database.sql:/docker-entrypoint-initdb.d/init-database.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U attendance_user -d attendance_dashboard"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Main Application (Frontend + Backend)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: https://my.fullship.net/api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3002
      
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: attendance_dashboard
      DB_USER: attendance_user
      DB_PASSWORD: nVp50Q8PefBbCqXNiLmOb45K0ZXCHv7EKEmTcr4GRDxT5gXoIBdLL7MYLx8PGP19
      DB_SSL: "false"
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # Security
      JWT_SECRET: your-super-secure-jwt-secret-change-in-production
      SESSION_SECRET: your-super-secure-session-secret-change-in-production
      
      # Application
      SERVE_STATIC: "true"
      ENABLE_CLUSTERING: "false"
      
    ports:
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Optional: Database Admin UI
  adminer:
    image: adminer:latest
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      - postgres

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: attendance_network
