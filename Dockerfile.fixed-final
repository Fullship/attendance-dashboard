# Production Dockerfile that handles Redis gracefully
FROM node:18-alpine AS frontend-builder

RUN apk add --no-cache openssl

WORKDIR /app
COPY frontend/package*.json ./
RUN npm ci

COPY frontend/ ./

ENV NODE_ENV=production
ENV GENERATE_SOURCEMAP=false
ENV REACT_APP_BUILD_TIME=2025-08-06T13:30:00.000Z
ENV REACT_APP_BUILD_HASH=coolify-build

RUN npx react-app-rewired build

FROM node:18-alpine AS production

RUN apk add --no-cache curl

# Create user
RUN addgroup -g 1001 -S nodejs && adduser -S app -u 1001

WORKDIR /app

# Copy backend
COPY backend/package*.json ./
RUN npm ci --only=production

COPY backend/ ./
COPY --from=frontend-builder /app/build ./public

# Create a startup script that handles Redis gracefully
RUN echo '#!/bin/sh' > /app/start.sh && \
    echo 'echo "Starting attendance dashboard..."' >> /app/start.sh && \
    echo '' >> /app/start.sh && \
    echo '# Set environment for single worker mode' >> /app/start.sh && \
    echo 'export ENABLE_CLUSTERING=false' >> /app/start.sh && \
    echo 'export MAX_WORKERS=1' >> /app/start.sh && \
    echo 'export NODE_ENV=production' >> /app/start.sh && \
    echo '' >> /app/start.sh && \
    echo '# Set Redis timeout to fail fast if not available' >> /app/start.sh && \
    echo 'export REDIS_CONNECT_TIMEOUT=5000' >> /app/start.sh && \
    echo 'export REDIS_COMMAND_TIMEOUT=3000' >> /app/start.sh && \
    echo '' >> /app/start.sh && \
    echo '# Start the application' >> /app/start.sh && \
    echo 'exec node server-worker.js' >> /app/start.sh && \
    chmod +x /app/start.sh

RUN chown -R app:nodejs /app

USER app

EXPOSE 3002

# Set default environment variables
ENV NODE_ENV=production
ENV PORT=3002
ENV ENABLE_CLUSTERING=false
ENV MAX_WORKERS=1

HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:3002/health || exit 1

CMD ["/app/start.sh"]
