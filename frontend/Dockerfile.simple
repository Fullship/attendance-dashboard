# Simple Frontend-only Dockerfile for separate deployment
FROM node:18-alpine AS builder

# Install openssl
RUN apk add --no-cache openssl

WORKDIR /app

# Install dependencies
COPY package*.json ./
RUN npm ci

# Copy source and build
COPY . ./

# Build with static variables
ENV NODE_ENV=production
ENV GENERATE_SOURCEMAP=false
ENV REACT_APP_BUILD_TIME=2025-08-06T13:30:00.000Z
ENV REACT_APP_BUILD_HASH=coolify-build

RUN npx react-app-rewired build

# Production stage
FROM nginx:alpine

# Install curl for health checks
RUN apk add --no-cache curl

# Copy built app
COPY --from=builder /app/build /usr/share/nginx/html

# Create simple nginx config
RUN echo 'server {' > /etc/nginx/conf.d/default.conf && \
    echo '  listen 80;' >> /etc/nginx/conf.d/default.conf && \
    echo '  root /usr/share/nginx/html;' >> /etc/nginx/conf.d/default.conf && \
    echo '  index index.html;' >> /etc/nginx/conf.d/default.conf && \
    echo '  location / { try_files $$uri $$uri/ /index.html; }' >> /etc/nginx/conf.d/default.conf && \
    echo '  location /health { return 200 "healthy"; }' >> /etc/nginx/conf.d/default.conf && \
    echo '}' >> /etc/nginx/conf.d/default.conf

EXPOSE 80

HEALTHCHECK CMD curl -f http://localhost/health || exit 1

CMD ["nginx", "-g", "daemon off;"]
