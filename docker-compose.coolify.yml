# Docker Compose for Coolify Deployment
# This excludes PostgreSQL and Redis as they're managed separately in Coolify

version: '3.8'

services:
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: attendance_backend
    restart: unless-stopped
    environment:
      - PORT=3002
      - NODE_ENV=production
      - FRONTEND_URL=${FRONTEND_URL}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASS=${EMAIL_PASS}
      - ENABLE_CLUSTERING=${ENABLE_CLUSTERING:-true}
      - MAX_WORKERS=${MAX_WORKERS:-4}
    ports:
      - "3002:3002"
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    networks:
      - attendance_network

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: attendance_frontend
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://backend:3002}
      - REACT_APP_BUILD_TIME=${REACT_APP_BUILD_TIME}
      - REACT_APP_BUILD_HASH=${REACT_APP_BUILD_HASH}
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    networks:
      - attendance_network

networks:
  attendance_network:
    driver: bridge
